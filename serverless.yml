service: order-application

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-east-1
environment:
  AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_SECRET_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ env.AWS_ACCESS_SECRET_KEY }}
  DB_URI: ${{ env.DB_URI }}
  # SQS_QUEUE_URL: ${{ env.SQS_QUEUE_URL }}

iamRoleStatements:
  - Effect: Allow
    Action:
      - sqs:SendMessage
      - sqs:ReceiveMessage
      - sqs:DeleteMessage
    Resource: arn:aws:sqs:us-east-1:960964000470:order-msg

functions:
  addUser:
    handler: index.createUser
    name: create-user
    memorySize: 128 # mb
    timeout: 20 # seconds
    environment:
      DB_URI: ${env:DB_URI}
    events:
      - http:
          path: user
          method: POST

  createOrder:
    handler: index.createOrder
    name: create-new-order
    memorySize: 128 # mb
    timeout: 20 # seconds
    environment:
      DB_URI: ${env:DB_URI}
      # SQS_QUEUE_URL: ${env:SQS_QUEUE_URL}
    events:
      - http:
          path: orders
          method: POST

  fetchAllOrders:
    handler: index.getCustomerOrder
    name: fetch-all-orders
    memorySize: 128 # mb
    timeout: 20 # seconds
    environment:
      DB_URI: ${env:DB_URI}
    events:
      - http:
          path: orders/{_id}
          method: GET

  processOrder:
    handler: index.processOrder
    name: process-order
    memorySize: 128 # mb
    timeout: 20 # seconds
    environment:
      DB_URI: ${env:DB_URI}
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:960964000470:order-msg

  updateProductInfo:
    handler: index.updateProductInfo
    name: update-product-info
    memorySize: 128 # mb
    timeout: 20 # seconds
    environment:
      DB_URI: ${env:DB_URI}
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:960964000470:product-msg
  # resources:
  #   Resources:
  #     MyQueue:
  #       Type: AWS::SQS::Queue
  #       Properties:
  #         QueueName: order-msg
